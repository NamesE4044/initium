#!/bin/bash
set -e

# ---------------FUNCTIONS & CORE VARIABLES---------------

INITIUM_VERSION="1.0.0"
USTART_CORE="$HOME/.ustart"
USTART_DATA_FILE="$USTART_CORE/ustart-projects.dat"
APP_NAME="ustart"

NC='\033[0m'
TERM_RED='\033[0;31m'
TERM_GREEN='\033[0;32m'
TERM_YEL='\033[33m'

ascii_splash(){
	clear
cat << "EOF"
                                                                  
                                                                  
                          ,d                               ,d     
                          88                               88     
88       88  ,adPPYba,  MM88MMM  ,adPPYYba,  8b,dPPYba,  MM88MMM  
88       88  I8[    ""    88     ""     `Y8  88P'   "Y8    88     
88       88   `"Y8ba,     88     ,adPPPPP88  88            88     
88a,   ,a88  aa    ]8I    88,    88,    ,88  88            88,    
88`"YbbdPY8 `"YbbdP"'    "Y888   `"8bbdP"Y8  88            "Y888  
88                                                                  
                                                                  

ustart - General Purpose Bare-Metal Embedded Project Generator
EOF
}

show_version(){
	ascii_splash
	echo -e "v${INITIUM_VERSION}"
}

show_help(){
	clear
	ascii_splash
cat << "EOF"


Usage: ustart <command> [command options]

	Options:
		-n, --name:	New project name (Required)
		-d, --dest:	New project destination folder (Will assume current working directory if left empty)
		-t, --template:	Target project MCU family (Required)
		-v, --variant:	Target MCU model (
		-r, --readme:	Create README file in new project (if left blank, ustart will prompt)

		-h, --help:	Show this help page	
		-v, --version:	Show Version Information

	Example:
		ustart new --name newProj --dest ~/Desktop -template STM32F1 --variant f103x8 --readme n

	For more info, visit https://github.com/NamesE4044/ustart
EOF
}

new_project(){

	# ---------------VARIABLES---------------

	name=""
	template=""
	readme="ask"
	destDir=""
	variant=""
	# ---------------OPTIONS PARSING---------------

	while [[ $# -gt 0 ]]; do
		case "$1" in
			-n|--name)
				name="$2"
				shift 2
				;;
			-t|--template)
				template="$2"
				shift 2
				;;
			-r|--readme)
				readme="$2"
				shift 2
				;;
			-d|--dest)
				destDir="$2"
				shift 2
				;;
			-v|--variant)
				variant="$2"
				shift 2
				;;
			--)
				shift
				break
				;;
			*)
				echo -e "${TERM_RED}Error:${NC} Unknown option '$1'."
				exit 3
				;;
		esac
	done


	templateBaseDir="$HOME/.ustart/template"

	# ---------------INPUT VALIDATION---------------

	if [ -z "$name" ]; then
		echo -e "${TERM_RED}Error:${NC} No name provided. Use -n|--name <project_name>."
		exit 2
	fi

	if [ -z "$destDir" ]; then
		echo -e "${TERM_YEL}Warning:${NC} Destination not specified, assuming current working directory..."
		destDir="."
	fi

	if [ -z "$template" ]; then
		echo -e "${TERM_RED}Error:${NC} Template not specified. Use -t|--template <template_name>."
		exit 2
	fi

	if [ -d "$templateBaseDir/$template" ]; then
		echo -e "${TERM_GREEN}Template Found!${NC} ($template)"
	else
		echo -e "${TERM_RED}Error:${NC} Template '$template' not found."
		exit 2
	fi

	if [[ -z "$variant" ]]; then
		echo -e "${TERM_RED}Error:${NC} Variant not specified. Use -v|--variant <variant>."
		exit 2
	fi

	if [[ ! "$name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
		echo -e "${TERM_RED}Error:${NC} Invalid Input. Project name must only be letters, numbers, underscores, or dashes."
		exit 1
	fi

	if [ -d "$destDir/$name" ]; then
		echo -e "${TERM_RED}Error:${NC} Directory Already Exists!"
		exit 1
	fi

	variantLinker="$templateBaseDir/$template/variant/${variant}.ld"

	if [ ! -f "$variantLinker"  ]; then
		echo -e "$TERM_RED}Error:${NC} Linker script not found for specified variant: ${variant}"
		exit 1;
	fi

	# ---------------RESOLVE DESTINATION PATH---------------
	destDir=$(realpath "$destDir") || {
		echo -e "${TERM_RED}Error:${NC} Cannot resolve destination path"
		exit 1
	}
	newProjPath="$destDir/$name"
	echo "New Project Path: $newProjPath"

	# ---------------PROJECT CREATION---------------

	rsync -av --exclude='variant' "$templateBaseDir/$template/common/" "$destDir/$name"

	destLinker="$destDir/$name/linker/linker.ld"

	mkdir -p "$destDir/$name/linker"
	cp "$variantLinker" "$destLinker"

	find "$destDir/$name" -type f \( -name "*.c" -o -name "*.s" -o -name "*.ld" -o -name "*.ld" \) | while read -r file; do
		echo "Injecting Comment"
		sed -i "1i\\
/* Î¼start project file - Licensed under MIT */
" "$file"
	done

#	find "$destDir/$name" -type f

	echo -e "${TERM_GREEN}New Project Created!${NC}\n"

	# ---------------README PROMPT---------------

	if [ "$readme" = "ask" ]; then
		while true; do
			read -p "Create README.md file? (y / n): " input
			case "$input" in
				[yY])
					readme="y"; break  ;;
				[nN])
					readme="n"; break ;;
				*)
					echo -e "${TERM_RED}Error: Invalid Input!${NC} Please enter y / n"; break ;;
			esac
		done
	fi

	# ---------------README CREATION---------------

	if [ "$readme" = "y" ]; then
		touch "$name/README.md"
		echo -e "${TERM_GREEN}README File Created!${NC}"
	elif [ "$readme" = "n" ]; then
		echo "Skipping README Creation..."
	fi

	# ---------------METADATA COPYING---------------
	METADATA_LINE=$(printf "%s\t%s\t%s\t%s" "$name" "$newProjPath" 
	"$template" "$variant")
	printf "%s\n" "$METADATA_LINE" >> "$USTART_DATA_FILE"
	echo "Metadata logged"

	# ---------------DISPLAY PROJECT INFO---------------

	echo -e "\nDisplaying New Project Structure:"
	if command -v tree >/dev/null 2>&1; then
		tree "$name"
	else
		echo -e "${TERM_RED}Cannot find tree command!${NC} Displaying new directory with ls"
		ls -R "$name"
	fi

	echo -e "\nNew Project Name: $name\nTarget MCU: $template-$variant\n"

	echo -e "${TERM_GREEN}Thank You!${NC} Exiting..."

	exit 0
}

# ---------------PREPROCESSOR LOGIC---------------

if ! command -v rsync >/dev/null 2>&1; then
	echo -e "${TERM_RED}Error:${NC} 'rsync' is not installed."
	echo -e "Please install it using your system package manager to continue."
	echo -e "	Debian/Ubuntu:	sudo apt install rsync"
	echo -e "	Arch:		sudo pacman -S rsync"
	echo -e "	Fedora:		sudo dnf install rsync"
	echo -e "	macOS (brew):	brew install rsync"
	exit 127
fi

# ---------------SUBCOMMAND LOGIC/ENTRY---------------

if [ -z "$1" ]; then
	echo -e "ustart ${INITIUM_VERSION}"
	exit 0
fi

COMMAND="$1"
shift

case "$COMMAND" in
	new)
		new_project "$@"
		;;
	build)
		echo "[!] 'build' not implemented yet!"
		;;
	flash)
		echo "[!] 'flash' not implemented yet!"
		;;
	--help|-h)
#		show_help
		show_version
		exit 0
		;;
	--version|-v)
		show_version
		exit 0
		;;
	*)
		echo "[!] Unknown command: $COMMAND"
		exit 1
		;;
esac
